# name: deploy to lambda
# on: [push]
# jobs:

#   deploy_zip:
#     name: deploy lambda function
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         go-version: [1.13.x]
#     steps:
#       - name: checkout source code
#         uses: actions/checkout@v1
#       - name: Install Go
#         uses: actions/setup-go@v1
#         with:
#           go-version: ${{ matrix.go-version }}
#       - name: Build binary
#         run: |
#           CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -a -o main main.go && zip deployment.zip main
#       - name: default deploy
#         uses: appleboy/lambda-action@master
#         with:
#           aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws_region: ${{ secrets.AWS_REGION }}
#           function_name: test-go
#           zip_file: deployment.zip
name: Deploy Lambda Function
on:
  push:
    branches: [ master]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  release:
    name: Deploy lambda function
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.13.x]
    steps:
      - uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ matrix.go-version }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 1200
          role-session-name: MySessionName
      - name: zip Lambda Function
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -v -a -o main main.go && zip deployment.zip main
      - name: AWS Deploy
        run: |
          aws lambda update-function-code --function-name test-go --zip-file fileb://deployment.zip